module part1(SW,HEX0,HEX1,LEDR);
         input [7:0] SW;
         output [7:0] LEDR;
         output [6:0] HEX1,HEX0;
         
         wire [3:0] a, b;
         assign a = SW[3:0];
         assign b = SW[7:4];

         assign LEDR[7:0] = SW[7:0];

         seg7 D0(a[0],a[1],a[2],a[3],HEX0);
         seg7 D1(b[0],b[1],b[2],b[3],HEX1);
endmodule

module seg7(x0,x1,x2,x3,Display);
         input x0,x1,x2,x3;
         output [6:0] Display;


         assign Display[0] = (~x1&~x3&~x0&x2)|(x0&~x1&~x3&~x2);
         assign Display[1] = (~x0&x1&~x3&x2)|(x0&~x1&~x3&x2);
         assign Display[2] = (~x0&x1&~x3&~x2);
         assign Display[3] = (x0&~x1&~x2)|(~x0&~x1&~x3&x2)|(x0&x1&~x3&x2);
         assign Display[4] = (x0&~x3)|(x0&~x1&~x2)|(~x1&~x3&x2);
         assign Display[5] = (x0&x1)|(x0&~x3&~x2)|(x1&~x3&~x2);
         assign Display[6] = (~x1&~x3&~x2)|(x0&x1&~x3&x2);
endmodule

         assign Display[0] = (~x1&~x2&~x0&x3)|(x0&~x1&~x2&~x3);
         assign Display[1] = (~x0&x1&~x2&x3)|(x0&~x1&~x2&x3);
         assign Display[2] = (~x0&x1&~x2&~x3);
         assign Display[3] = (x0&~x1&~x3)|(~x0&~x1&~x2&x3)|(x0&x1&~x2&x3);
         assign Display[4] = (x0&~x2)|(x0&~x1&~x3)|(~x1&~x2&x3);
         assign Display[5] = (x0&x1)|(x0&~x2&~x3)|(x1&~x2&~x3);
         assign Display[6] = (~x1&~x2&~x3)|(x0&x1&~x2&x3);
endmodule

-------------------------------------------------------------------------------------
module part2(SW,HEX1,HEX0,LEDR);
	input [3:0] SW;
	output [9:0] LEDR;
	output [6:0] HEX0,HEX1;
	
	wire z;
	wire [3:0] A,V,B;
	
	assign V = SW[3:0];
	assign LEDR[3:0] = V;
	assign LEDR[9:4] = 1'b0;
	
	grt9 Z(V,z);
	circuitA(V,A);
	
	mux4bit2to1 B0(V,A,z,B);
	//seg7 H0(V[0],V[1],V[2],V[3],HEX);
	seg7 H0(B[0],B[1],B[2],B[3],HEX0);
	seg7 H1(z,0,0,0,HEX1);
endmodule
	
	
	
module grt9 (in,out);

	input [3:0] in;
	output out;
	
	assign out = ((in[2]&in[3])|(in[1]&~in[2]&in[3]));

endmodule

module circuitA (in,out);

	input [3:0] in;
	output [3:0] out;
	
	assign out[0] = (in[0]&in[1]&~in[2]&in[3])|(in[0]&~in[1]&in[2]&in[3])|(in[0]&in[1]&in[2]&in[3]);
	//assign out[0] = in
	assign out[1] = (~in[1]&in[2]&in[3]);
	assign out [2] = (in[1]&in[2]&in[3]);
	assign out [3] = 0;

endmodule

module mux4bit2to1(x,y,s,out1);
	input [3:0] x,y;
	input s;
	output [3:0] out1;
	
	assign out1[0] = (~s&x[0])|(s&y[0]);
	assign out1[1] = (~s&x[1])|(s&y[1]);
	assign out1[2] = (~s&x[2])|(s&y[2]);
	assign out1[3] = (~s&x[3])|(s&y[3]);
endmodule
	
module seg7(x0,x1,x2,x3,Display);
         input x0,x1,x2,x3;
         output [6:0] Display;

         assign Display[0] = (~x1&~x3&~x0&x2)|(x0&~x1&~x3&~x2);
         assign Display[1] = (~x0&x1&~x3&x2)|(x0&~x1&~x3&x2);
         assign Display[2] = (~x0&x1&~x3&~x2);
         assign Display[3] = (x0&~x1&~x2)|(~x0&~x1&~x3&x2)|(x0&x1&~x3&x2);
         assign Display[4] = (x0&~x3)|(x0&~x1&~x2)|(~x1&~x3&x2);
         assign Display[5] = (x0&x1)|(x0&~x3&~x2)|(x1&~x3&~x2);
         assign Display[6] = (~x1&~x3&~x2)|(x0&x1&~x3&x2);
endmodule

-----------------------------------------------------------------------
module part3(SW,LEDR);
	input [8:0] SW;
	output[9:0] LEDR;
	
	assign LEDR[9] = 1;
	
	adder4 A0(SW[3:0],SW[7:4],SW[8],LEDR[4:0]);
	
	
endmodule

module adder4(A,B,S,sum);
	input [3:0] A,B;
	input S;
	output [4:0] sum;
	
	wire [4:0] C;
	
	
	assign C[0] = S;
	
	fa U0(A[0],B[0],C[0],sum[0],C[1]);
	fa U1(A[1],*B[1],C[1],sum[1],C[2]);
	fa U2(A[2],B[2],C[2],sum[2],C[3]);
	fa U3(A[3],B[3],C[3],sum[3],C[4]);
	assign sum[4] = C[4];
	
endmodule

module fa(a,b,cin,s,cout);
	input a,b,cin;
	output s,cout;
	
	assign s = (a^b^cin);
	assign cout = (b&a)|(b&cin)|(a&cin);
endmodule
--------------------------------------------------------------------
module part4(SW,LEDR,HEX0,HEX1,HEX4,HEX5);
	input [8:0] SW;
	output [9:0] LEDR;
	output [6:0] HEX0,HEX1,HEX4,HEX5;

	wire [3:0] X,Y;//wire inputs
	wire [3:0] Hout,Aout,Bout,Mux0;//wire intermediates
	wire [4:0] SUM;
	wire S,Zx,Zy,Zsum,Zout;
	assign X = SW[3:0];
	assign Y = SW[7:4];
	assign S = SW[8];
	
	//assign all HEX in this block, 
	seg7 H4(X[0],X[1],X[2],X[3],HEX4);//set hex4 to X
	seg7 H5(Y[0],Y[1],Y[2],Y[3],HEX5);//set hex5 to Y
	
	seg7 H1(Zout,0,0,0,HEX1);
	assign LEDR[4:0] = SUM;
	
	adder4 A0(SW[3:0],SW[7:4],SW[8],SUM);//compute addition
	
	//use grt9 module in this block
	grt9 Z0(X[0],X[1],X[2],X[3],Zx); //check if X is greater than 9
	grt9 Z1(Y[0],Y[1],Y[2],Y[3],Zy); //check if Y is greater than 9
	grt9 Z2(SUM[0],SUM[1],SUM[2],SUM[3],Zsum);

	assign Zout = (Zsum)|(SUM[4]); //assign Z out using OR gate

	//compute what HEX0 should be
	circuitA A1(SUM[3:0],Aout); 
	circuitB B1(SUM[0],SUM[1],Bout);
	mux4bit2to1 M0 (SUM[3:0],Aout,Zsum,Mux0);
	mux4bit2to1 M1 (Mux0,Bout,SUM[4],Hout);
	
	seg7 H0(Hout[0],Hout[1],Hout[2],Hout[3],HEX0);
	//seg7 Htest(SUM[0],SUM[1],SUM[2],SUM[3],HEX0);
	//seg7 Htest2(Mux0[0],Mux0[1],Mux0[2],Mux0[3],HEX0);

	assign LEDR[9] = (Zx)|(Zy);//turn on SW9 if X or Y is larger than 9

	


endmodule

module seg7(x0,x1,x2,x3,Display);
         input x0,x1,x2,x3;
         output [6:0] Display;


         assign Display[0] = (~x1&~x3&~x0&x2)|(x0&~x1&~x3&~x2);
         assign Display[1] = (~x0&x1&~x3&x2)|(x0&~x1&~x3&x2);
         assign Display[2] = (~x0&x1&~x3&~x2);
         assign Display[3] = (x0&~x1&~x2)|(~x0&~x1&~x3&x2)|(x0&x1&~x3&x2);
         assign Display[4] = (x0&~x3)|(x0&~x1&~x2)|(~x1&~x3&x2);
         assign Display[5] = (x0&x1)|(x0&~x3&~x2)|(x1&~x3&~x2);
         assign Display[6] = (~x1&~x3&~x2)|(x0&x1&~x3&x2);
endmodule

module grt9 (in0,in1,in2,in3,out);

	input in0,in1,in2,in3;
	output out;
	
	assign out = ((in2&in3)|(in1&~in2&in3));

endmodule

module circuitA (in,out); //assign HEX0 if 9>value>15

	input [3:0] in;
	output [3:0] out;
	
	assign out[0] = (in[0]&in[1]&~in[2]&in[3])|(in[0]&~in[1]&in[2]&in[3])|(in[0]&in[1]&in[2]&in[3]);
	//assign out[0] = in
	assign out[1] = (~in[1]&in[2]&in[3]);
	assign out [2] = (in[1]&in[2]&in[3]);
	assign out [3] = 0;

endmodule

module circuitB (in0,in1,out);// assign HEX0 if 15>value>19

	input in0,in1;
	output[3:0] out;//give out as 4 bit to make m y life easier
	
	assign out[0] = in0;
	assign out[1] = ~in1;
	assign out[2] = ~in1;
	assign out[3] = in1;

endmodule

module mux4bit2to1(x,y,s,out1);
	input [3:0] x,y;
	input s;
	output [3:0] out1;
	
	assign out1[0] = (~s&x[0])|(s&y[0]);
	assign out1[1] = (~s&x[1])|(s&y[1]);
	assign out1[2] = (~s&x[2])|(s&y[2]);
	assign out1[3] = (~s&x[3])|(s&y[3]);
endmodule

module adder4(A,B,S,sum);
	input [3:0] A,B;
	input S;
	output [4:0] sum;
	
	wire [4:0] C;
	
	
	assign C[0] = S;
	
	fa U0(A[0],B[0],C[0],sum[0],C[1]);
	fa U1(A[1],B[1],C[1],sum[1],C[2]);
	fa U2(A[2],B[2],C[2],sum[2],C[3]);
	fa U3(A[3],B[3],C[3],sum[3],C[4]);
	assign sum[4] = C[4];
	
endmodule

module fa(a,b,cin,s,cout);
	input a,b,cin;
	output s,cout;
	
	assign s = (a^b^cin);
	assign cout = (b&a)|(b&cin)|(a&cin);
endmodule
----------------------------------------------
module part5(SW,HEX0,HEX1,HEX4,HEX5);
	
	input [8:0] SW;
	output [6:0] HEX0,HEX1,HEX4,HEX5;
	
	wire [3:0] a,b;
	reg [4:0] t0,z0,cout,s0,s1;
	wire cin;
	
	
	assign b = SW[3:0] ;
	assign a = SW[7:4];
	assign cin = SW[8]; 
	
	seg7 H0(s0[0],s0[1],s0[2],s0[3],HEX0);
	seg7 H1(s1[0],s1[1],s1[2],s1[3],HEX1);
	seg7 H4(SW[0],SW[1],SW[2],SW[3],HEX4);
	seg7 H5(SW[4],SW[5],SW[6],SW[7],HEX5);
	
	always @(a,b,cin)
	begin
		t0 = a +b +cin;
		if (t0 > 5'd9)
			begin
			z0 = 5'd10;
			cout = 5'h1;
			end
		else
			begin
			z0 = 5'd0;
			cout = 5'd0;
			end
		s0 = t0-z0;
		s1 = cout;
	end
	

	
	
endmodule

module seg7(x0,x1,x2,x3,Display);
         input x0,x1,x2,x3;
         output [6:0] Display;


         assign Display[0] = (~x1&~x3&~x0&x2)|(x0&~x1&~x3&~x2);
         assign Display[1] = (~x0&x1&~x3&x2)|(x0&~x1&~x3&x2);
         assign Display[2] = (~x0&x1&~x3&~x2);
         assign Display[3] = (x0&~x1&~x2)|(~x0&~x1&~x3&x2)|(x0&x1&~x3&x2);
         assign Display[4] = (x0&~x3)|(x0&~x1&~x2)|(~x1&~x3&x2);
         assign Display[5] = (x0&x1)|(x0&~x3&~x2)|(x1&~x3&~x2);
         assign Display[6] = (~x1&~x3&~x2)|(x0&x1&~x3&x2);
endmodule