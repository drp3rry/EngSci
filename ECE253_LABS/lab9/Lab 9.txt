Part 1: Pseudocode
def bubbleSort(arr):
    n = len(arr)
 
    # Traverse through all array elements
    for i in range(n):
 
        # Last i elements are already in place
        for j in range(0, n-i-1):
 
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
///
.global _start
_start:


//load length to r4, address to r0, address by 4 to r1
	ldr r0, =TEST_NUM //r0 holds the adress of list
	//mov r9, r0
	ldr r4, [r0], #4 //r4 holds the length of the list
	sub r4,r4,#1
	mov r9, r0
	mov r6,r4 //r6 also holds the length
	//sub r6,r6,#1
	mov r7,r4//save length
	
	
	BL CYCLE
	b finish
finish:
b finish
	

//load first element to r1, second element to r2, temp is r3, counter is r5
CYCLE: 
	cmp r6,#0
	beq NEXT
	
	ldr r1, [r0], #4 //load what is at r0 into r1, incrememnt r0
	ldr r2, [r0] //load what is in r00 into r2
	cmp r1, r2 //compare r2 and r1
	sub r6,r6,#1 //increment inner loop
	BGT SWAP
	//str r1, [r0]
	
	B CYCLE

SWAP:
	mov r3, r2
	str r1, [r0]
	str r3, [r0,#-4]
	B CYCLE

NEXT:
    sub r4,r4,#1  //increment outer loop
	cmp r4,#0
	beq END
	mov r0,r9 //reload list to r0
	mov r6, r7 //reset r6
	b CYCLE
	

    
END: 
mov pc,lr


TEST_NUM: .word 10, 1400, 45, 23, 5, 3, 8, 17, 4, 20, 33
.end
	


movgt r8,r2
	movgt r2,r0
	strgt r0, [r3,#4]
	strgt r2, [r3,#8]
	movgt r0, #1
///////
.global _start
_start:


//load length to r4, address to r0, address by 4 to r1
	ldr r0, =TEST_NUM //r0 holds the adress of list
	//mov r9, r0
	ldr r4, [r0], #4 //r4 holds the length of the list
	sub r4,r4,#1
	mov r9, r0
	mov r6,r4 //r6 also holds the length
	//sub r6,r6,#1
	mov r7,r4//save length
	
	
	B CYCLE
	


//load first element to r1, second element to r2, temp is r3, counter is r5
CYCLE: 
	cmp r6,#0
	beq NEXT
	
	ldr r1, [r0], #4 //load what is at r0 into r1, incrememnt r0
	ldr r2, [r0] //load what is in r00 into r2
	//cmp r1, r2 //compare r2 and r1
	sub r6,r6,#1 //increment inner loop
	push {r0}
	BL SWAP
	cmp r0,#0
	beq NEXT
	pop {r0}
	//str r1, [r0]
	
	B CYCLE

SWAP:
	cmp r1,r2
	movgt r3, r2
	strgt r1, [r0]
	strgt r3, [r0,#-4]
	movgt r0,#1 //swap value is one if swapped
	
	MOV PC,LR

NEXT:
    sub r4,r4,#1  //increment outer loop
	cmp r4,#0
	beq END
	mov r0,r9 //reload list to r0
	mov r6, r7 //reset r6
	b CYCLE
	

    
END: 
b end


TEST_NUM: .word 10, 1400, 45, 23, 5, 3, 8, 17, 4, 20, 33
.end
	/////part 2
.global _start
_start:
	ldr r0,=0xff200000 //ledr
	ldr r1,=0xfffec600 //clock
	mov r2,#0x201 //ledr
	ldr r3,= 50000000 //0.25 seconds
	str r3, [r1]
	mov r3, #0b11 //A,E
	str r3,[r1,#0x8]
	mov r5,#0 //count
	ldr r9,=TEST_NUM //hex value 201
	ldr r7, [r9], #4
	ldr r8, [r9] //hex value 102
DISPLAY:
	str r2, [r0] //store r2 into red LEDs

ASSIGN:
	cmp r5,#0
	ldreq r2,=0x201
	cmp r5,#1
	ldreq r2,=0x102
	cmp r5,#2
	moveq r2,#0x84
	cmp r5,#3
	moveq r2,#0x48
	cmp r5,#4
	moveq r2,#0x30
	moveq r5,#0 //rest count
	
COUNT:
	ldr r4,[r1,#0xc]
	cmp r4, #0
	beq COUNT
	mov r4,#0
	add r5,r5,#1
	str r4,[r1,#0xc]
	eor r2,r2,#0x1
	b DISPLAY
	
TEST_NUM: .word 0x201, 0x102, 0x84, 0x48, 0x30
//NUM1: .word 0x201
//NUM2: .word 0x102
.end


